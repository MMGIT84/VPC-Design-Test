AWSTemplateFormatVersion: 2010-09-09
Description: Basic template deploys a basic VPC  with 4 subnets (2 public, 2 private) across 2 Availability Zones
Parameters:
 PMOWNIP:
    Description: "Update this with your own office/home public ip address to allow SSH from this"
    Type: "String" 

Resources:
  # First, a VPC:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.1.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
      - Key: Name
        Value:  !Join ['', [!Ref "AWS::StackName", "-VPC" ]]

  #  For VPC  internet access:      
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    DependsOn: VPC
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # Subnets: 2 public and 2 private
  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.1.10.0/24
     # Get the first AZ in the list  
      AvailabilityZone: !Select [ 0, !GetAZs ]     
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-Public-A
  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.1.20.0/24
      AvailabilityZone: !Select [ 1, !GetAZs ]     
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-Public-B

  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.1.50.0/24
      AvailabilityZone: !Select [ 0, !GetAZs ]    
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-Private-A
  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.1.60.0/24
      AvailabilityZone: !Select [ 1, !GetAZs ]     
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-Private-B

  # Route tables 
  #Public Route table and access web through IGW
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Public
  PublicRoute1:   
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      
  # Private route table  and access web through NAT
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Private
  PrivateRoute1:            
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway

  # A NAT Gateway:
  NATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt ElasticIPAddress.AllocationId
      SubnetId: !Ref PublicSubnetA
      Tags:
      - Key: Name
        Value: !Sub NAT-${AWS::StackName}
  ElasticIPAddress:
    Type: AWS::EC2::EIP
    Properties:
      Domain: VPC

  # Attach the public subnets to public route tables, 
  # Attach the private subnets to private route tables:    
  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref PublicRouteTable
  PublicSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetB
      RouteTableId: !Ref PublicRouteTable
  PrivateSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetA
      RouteTableId: !Ref PrivateRouteTable
  PrivateSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetB
      RouteTableId: !Ref PrivateRouteTable
   
   # Public Network ACL
  PublicNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name 
        Value:  !Join [ '', [ !Ref "AWS::StackName", "-public-acl" ]]

   ####### INBOUND HTTP Network ACL RULES        
  InboundHttpNacl:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: 100
      Protocol: 6
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 80
        To: 80

  ####### INBOUND HTTPS Network ACL RULES #######
  InboundHttpsNacl:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: 200
      Protocol: 6
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 443
        To: 443
  ####### INBOUND SSH Network ACL RULES #######
  InboundSSHNacl:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: 300
      Protocol: 6
      RuleAction: allow
      Egress: false
      CidrBlock: !Ref PMOWNIP
      PortRange:
        From: 22
        To: 22
  ####### OUTBOUND HTTPS Network ACL RULES #######
  OutboundHttpsRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
        NetworkAclId: !Ref PublicNetworkAcl
        RuleNumber: 100
        Protocol: 6
        Egress: true
        RuleAction: allow
        CidrBlock: 0.0.0.0/0
        PortRange:
          From: 443
          To: 443
######## Associate Public Subnet to Network ACL #######
  MyPublicSubnet1NetworkAclAssociation:
    Type: "AWS::EC2::SubnetNetworkAclAssociation"
    Properties:
      SubnetId: !Ref PublicSubnetA
      NetworkAclId: !Ref PublicNetworkAcl

  MyPublicSubnet2NetworkAclAssociation:
    Type: "AWS::EC2::SubnetNetworkAclAssociation"
    Properties:
      SubnetId: !Ref PublicSubnetB
      NetworkAclId: !Ref PublicNetworkAcl

 # Private Network ACL
  PrivateNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Join [ '', [ !Ref "AWS::StackName", "-private-acl" ] ]

  # Private Network ACL Rules
  InEphemeralPrivateNetworkAclAllowAll:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: PrivateNetworkAcl
    Properties:
      NetworkAclId: !Ref PrivateNetworkAcl
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 0
        To: 65535
  OutPrivateNetworkAclAllowAll:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: PrivateNetworkAcl
    Properties:
      NetworkAclId: !Ref PrivateNetworkAcl
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      Egress: true
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 0
        To: 65535

  # Private Subnet Associations
  PrivateSubnetNetworkAclAssociation1:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    DependsOn:
    - PrivateSubnetA
    - PrivateNetworkAcl
    Properties:
      SubnetId: !Ref PrivateSubnetA
      NetworkAclId: !Ref PrivateNetworkAcl

  PrivateSubnetNetworkAclAssociation2:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    DependsOn:
    - PrivateSubnetB
    - PrivateNetworkAcl
    Properties:
      SubnetId: !Ref PrivateSubnetB
      NetworkAclId: !Ref PrivateNetworkAcl

Outputs:
  VPC:
    Description: VPC used
    Value: !Ref VPC
    Export:
      Name: !Sub "${AWS::StackName}::vpc-id"
  InternetGateway:
    Description: IGW created
    Value: !Ref InternetGateway
  AttachGateway:
    Description: AttachGateway Done
    Value: !Ref AttachGateway
  PublicSubnets:
    Description: A list of the public subnets
    Value: !Join [ ",", [ !Ref PublicSubnetA, !Ref PublicSubnetB ]]
  PrivateSubnets:
    Description: A list of the private subnets
    Value: !Join [ ",", [ !Ref PrivateSubnetA, !Ref PrivateSubnetB ]]
  RouteTablePublic:
    Description: Public Route table and access web through IGW
    Value: !Join [ ",", [ !Ref PublicRouteTable, !Ref PublicRoute1 ]]  
  RouteTablePrivate:
    Description: Private Route table and access web through NGW
    Value: !Join [ ",", [ !Ref PrivateRouteTable, !Ref PrivateRoute1 ]] 
  NATGateway:
    Description: NATGW Done
    Value: !Ref NATGateway
  NATEIP:
    Description: NAT ElasticIPAddress
    Value: !Ref ElasticIPAddress
  SubnetRTPublicAssociation:
    Description: Public Route tables attached to public subnets
    Value: !Join [ ",", [ !Ref PublicSubnetARouteTableAssociation, !Ref PublicSubnetBRouteTableAssociation ]] 
  SubnetRTPrivateAssociation:
    Description: Private Route tables attached to private subnets
    Value: !Join [ ",", [ !Ref PrivateSubnetARouteTableAssociation, !Ref PrivateSubnetBRouteTableAssociation ]] 
  PublicNetworkAcl:
    Description: Reference to Public Network ACL created 
    Value: !Ref PublicNetworkAcl
  PrivateNetworkACL: 
    Description: A reference to the Private Network ACL created 
    Value: !Ref PrivateNetworkAcl
   
